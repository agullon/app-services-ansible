---
- name: RHOAS test
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
  - name: Create kafka
    rhoas.rhoas.create_kafka:
      name: "unique-kafka-name"
      cloud_provider: "aws"
      region: "us-east-1"
      plan: "developer.x1"
      billing_model: "standard"
      # billing_cloud_account_id: "billing_cloud_account_id"
      # openshift_offline_token: "OFFLINE_TOKEN"
    register:
      kafka_req_resp_obj
  - name: Debug create kafka
    debug:
      msg: "{{ kafka_req_resp_obj['kafka_id'] }}"
  - name: Get kafkas
    rhoas.rhoas.get_kafkas:
    register:
      kafkas_resp_obj
  - name: Debug kafkas
    debug:
      msg: "{{ kafkas_resp_obj }}"
  - name: Create Service Account
    rhoas.rhoas.create_service_account:
      name: "jeeves"
      description: "jeeves service account"
      # openshift_offline_token: "OFFLINE_TOKEN"
    # no_log: True
    register:
      srvce_acc_resp_obj
  - name: Create kafka ACL Service Binding
    rhoas.rhoas.create_kafka_acl_binding:
      # dynamically get the kafka id from the kafka_req_resp
      kafka_id: "{{ kafka_req_resp_obj['kafka_id'] }}"
      # to hardcode the kafka_id uncomment and use the following line
      # kafka_id: "KAFKA_ID"

      # dynamically get the service account id from the srvce_acc_resp_obj
      principal: " {{ srvce_acc_resp_obj['client_id'] }}"
      # to hardcode the principal_id uncomment and use the following line
      # principal: "PRINCIPAL_ID"

      # These keys must have values to be passed for the successful execution of the task
      resource_name: "topic_name"
      resource_type: "Topic"
      pattern_type: "PREFIXED"
      operation_type: "all"
      permission_type: "allow"
      # openshift_offline_token: "OFFLINE_TOKEN"

      # passing the kafka_admin_url from the kafka_req_resp_obj is more efficient as one less API call is made
      # kafka_admin_url: "https://kafka-admin.dev.struttin.com"
  - name: Create Kafka Topic
    rhoas.rhoas.create_kafka_topic:
      topic_name: "topic_one"
      kafka_id: "{{ kafka_req_resp_obj['kafka_id'] }}"
      # to hardcode the kafka_id uncomment and use the following line
      # kafka_id: "KAFKA_ID"

      # openshift_offline_token: "OFFLINE_TOKEN"
      partitions: 1
      retention_period_ms: "86400666"
      retention_size_bytes: "1073741824"
      cleanup_policy: "compact"
    register:
      kafka_topic_resp_obj
  - name: Create Kafka Topic2
    rhoas.rhoas.create_kafka_topic:
      topic_name: "topic_two"
      kafka_id: "{{ kafka_req_resp_obj['kafka_id'] }}"
      # to hardcode the kafka_id uncomment and use the following line
      # kafka_id: "KAFKA_ID"

      # openshift_offline_token: "OFFLINE_TOKEN"
      partitions: 1
    register:
      kafka_topic_resp_obj2
  - name: Update Kakfa topic1
    rhoas.rhoas.update_kafka_topic:
      topic_name: "topic_one"
      kafka_id: "{{ kafka_req_resp_obj['kafka_id'] }}"
      # to hardcode the kafka_id uncomment and use the following line
      # kafka_id: "KAFKA_ID"

      # openshift_offline_token: "OFFLINE_TOKEN"
      partitions: 1
      
      ## this will update the cleanup_policy from compact to delete
      cleanup_policy: "delete"

      ## some other parameters that can be updated
      # retention_period_ms: "86400666"
      # retention_size_bytes: "1073741824"
    register:
      kafka_topic_resp_obj
  - name: Debug update kafka topic
    debug:
      msg: "{{ kafka_topic_resp_obj }}" 
  - name: Delete kafka topic_one
    rhoas.rhoas.delete_kafka_topic:
      topic_name: "topic_one"
      kafka_id: "{{ kafka_req_resp_obj['kafka_id'] }}"

      # to hardcode the kafka_id uncomment and use the following line
      # kafka_id: "KAFKA_ID"

      # openshift_offline_token: "OFFLINE_TOKEN"
  - name: Delete kafka topic_two
    rhoas.rhoas.delete_kafka_topic:
      topic_name: "topic_two"
      kafka_id: "{{ kafka_req_resp_obj['kafka_id'] }}"
      # to hardcode the kafka_id uncomment and use the following line
      # kafka_id: "KAFKA_ID"

      # openshift_offline_token: "OFFLINE_TOKEN"
  - name: Delete Service Account
    rhoas.rhoas.delete_service_account_by_id:
      # service_account_id: "service_account_id"
      service_account_id: "{{ srvce_acc_resp_obj['client_id'] }}"

      # openshift_offline_token: "OFFLINE_TOKEN"
  - name: Delete kafka
    rhoas.rhoas.delete_kafka_by_id:
      kafka_id: "{{ kafka_req_resp_obj['kafka_id'] }}"
      # to hardcode the kafka_id uncomment and use the following line
      
      # openshift_offline_token: "OFFLINE_TOKEN"

